

**Query #1**

    select 
        	sales.customer_id customer, 
            sum(menu.price) money_spent
        from dannys_diner.sales
        	join dannys_diner.menu 
            on sales.product_id = menu.product_id
        group by sales.customer_id
        order by sales.customer_id;

| customer | money_spent |
| -------- | ----------- |
| A        | 76          |
| B        | 74          |
| C        | 36          |

---
**Query #2**

    select 
        	customer_id customer, 
            count(distinct order_date) day_count
        from dannys_diner.sales
        group by customer_id;

| customer | day_count |
| -------- | --------- |
| A        | 4         |
| B        | 6         |
| C        | 2         |

---
**Query #3**

    with sales_rank as (
          select 
            sales.customer_id, 
            sales.order_date, 
            menu.product_name,
            dense_rank() over (
              partition by sales.customer_id 
              order by sales.order_date) as rank
          from dannys_diner.sales
          join dannys_diner.menu
            on sales.product_id = menu.product_id
        )
        
        select 
          customer_id customer, 
          product_name product
        from sales_rank
        where rank = 1
        group by customer_id, product_name;

| customer | product |
| -------- | ------- |
| A        | curry   |
| A        | sushi   |
| B        | curry   |
| C        | ramen   |

---
**Query #4**

    select
        	menu.product_name product,
            count(sales.product_id) count
        from dannys_diner.sales
        	join dannys_diner.menu
            on sales.product_id = menu.product_id
        group by menu.product_name
        limit 1;

| product | count |
| ------- | ----- |
| ramen   | 8     |

---
**Query #5**

    select
         	sales.customer_id customer,
            menu.product_name product,
            count(*) as purchased
        from dannys_diner.sales
        	join dannys_diner.menu
            on sales.product_id = menu.product_id
        group by sales.customer_id, menu.product_name
        order by sales.customer_id, purchased desc;

| customer | product | purchased |
| -------- | ------- | --------- |
| A        | ramen   | 3         |
| A        | curry   | 2         |
| A        | sushi   | 1         |
| B        | ramen   | 2         |
| B        | curry   | 2         |
| B        | sushi   | 2         |
| C        | ramen   | 3         |

---
**Query #6**

    with pop_menu as (
          select 
          	sales.customer_id,
          	menu.product_name,
          	count(sales.product_id) as purchased,
          	dense_rank() over (
              partition by sales.customer_id
              order by count(sales.customer_id) desc) as rank
           from dannys_diner.sales
           		join dannys_diner.menu
           		on sales.product_id = menu.product_id
           group by sales.customer_id, menu.product_name
        )
        
        select 
        	customer_id customer,
            product_name product,
            purchased
        from pop_menu 
        	where rank = 1;

| customer | product | purchased |
| -------- | ------- | --------- |
| A        | ramen   | 3         |
| B        | ramen   | 2         |
| B        | curry   | 2         |
| B        | sushi   | 2         |
| C        | ramen   | 3         |

---
**Query #7**

    with mem_items as(
      select
      	sales.customer_id,
      	sales.product_id,
      	row_number() over 
      		(partition by members.customer_id
             order by sales.order_date) as date_row
      	from dannys_diner.sales
      	join dannys_diner.members
      		on sales.customer_id = members.customer_id
      	where sales.order_date > members.join_date
     )
     
     select
     	mem_items.customer_id customer,
        menu.product_name product
     from mem_items
     	join dannys_diner.menu
        on mem_items.product_id = menu.product_id
     where date_row = 1
     order by customer;

| customer | product |
| -------- | ------- |
| A        | ramen   |
| B        | sushi   |

---
**Query #8**

    with prior_mem_items as(
      select
      	sales.customer_id,
      	sales.product_id,
      	row_number() over 
      		(partition by members.customer_id
             order by sales.order_date desc) as date_row
      	from dannys_diner.sales
      	join dannys_diner.members
      		on sales.customer_id = members.customer_id
      	where sales.order_date < members.join_date
     )
     
     select 
     	prior_mem_items.customer_id customer,
        menu.product_name product
     from prior_mem_items
     	join dannys_diner.menu
        on prior_mem_items.product_id = menu.product_id
     where date_row = 1
     order by customer;

| customer | product |
| -------- | ------- |
| A        | sushi   |
| B        | sushi   |

---
**Query #9**

    select
    	sales.customer_id customer,
    	count(sales.customer_id) total_items,
        sum(menu.price) amount_spent
    from dannys_diner.sales
    	join dannys_diner.menu
        	on sales.product_id = menu.product_id
        join dannys_diner.members
        	on sales.customer_id = members.customer_id
    where sales.order_date < members.join_date
    group by sales.customer_id
    order by sales.customer_id;

| customer | total_items | amount_spent |
| -------- | ----------- | ------------ |
| A        | 2           | 25           |
| B        | 3           | 40           |

---
**Query #10**

    select
    	sales.customer_id customer,
        sum(case 
        	when menu.product_name = 'sushi'
            	then menu.price * 20
            else menu.price * 10
            end) points
    from dannys_diner.sales
        join dannys_diner.menu
            on sales.product_id = menu.product_id
    group by sales.customer_id
    order by sales.customer_id;

| customer | points |
| -------- | ------ |
| A        | 860    |
| B        | 940    |
| C        | 360    |

---
**Query #11**

    with offer_dates as (
      select 
      	sales.customer_id customer,
      	sales.order_date,
      	menu.product_name,
      	menu.price,
      	members.join_date,
      	(join_date + interval '6 day') offer_end
      from dannys_diner.sales
      	join dannys_diner.menu
      		on sales.product_id = menu.product_id
      	join dannys_diner.members
      		on sales.customer_id = members.customer_id
    )
    
    select
    	customer,
        sum(case 
            when order_date between join_date and offer_end
            	then price * 20
        	when product_name = 'sushi'
            	then price * 20
            else price * 10
            end) jan_member_points
    from offer_dates
    where order_date < '2021-02-01'
    group by customer;

| customer | jan_member_points |
| -------- | ----------------- |
| A        | 1370              |
| B        | 820               |

---
**Query #12**

    Select
    	sales.customer_id, sales.order_date,
        menu.product_name, menu.price,
        case
        	when sales.order_date >= members.join_date
            	then 'Y'
            when sales.order_date < members.join_date
            	then 'N'
            else 'N'
          	end member
    from dannys_diner.sales
    	join dannys_diner.menu
        	on sales.product_id = menu.product_id
        left join dannys_diner.members
        	on sales.customer_id = members.customer_id
    order by sales.customer_id, sales.order_date;

| customer_id | order_date               | product_name | price | member |
| ----------- | ------------------------ | ------------ | ----- | ------ |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 10    | N      |
| A           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |
| A           | 2021-01-07T00:00:00.000Z | curry        | 15    | Y      |
| A           | 2021-01-10T00:00:00.000Z | ramen        | 12    | Y      |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      |
| B           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |
| B           | 2021-01-02T00:00:00.000Z | curry        | 15    | N      |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 10    | N      |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 10    | Y      |
| B           | 2021-01-16T00:00:00.000Z | ramen        | 12    | Y      |
| B           | 2021-02-01T00:00:00.000Z | ramen        | 12    | Y      |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |
| C           | 2021-01-07T00:00:00.000Z | ramen        | 12    | N      |

---
**Query #13**

    with mem_status as (
      Select
    	sales.customer_id, sales.order_date,
        menu.product_name, menu.price,
        case
        	when sales.order_date >= members.join_date
            	then 'Y'
            when sales.order_date < members.join_date
            	then 'N'
            else 'N'
          	end member
    from dannys_diner.sales
    	join dannys_diner.menu
        	on sales.product_id = menu.product_id
        left join dannys_diner.members
        	on sales.customer_id = members.customer_id
    )
    
    select *,
    	case	
        	when member = 'N'
            	then null
            else
    			rank() over (
                  partition by customer_id, member
                  order by order_date, member)
            end
    from mem_status;

| customer_id | order_date               | product_name | price | member | rank |
| ----------- | ------------------------ | ------------ | ----- | ------ | ---- |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 10    | N      |      |
| A           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |      |
| A           | 2021-01-07T00:00:00.000Z | curry        | 15    | Y      | 1    |
| A           | 2021-01-10T00:00:00.000Z | ramen        | 12    | Y      | 2    |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      | 3    |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      | 3    |
| B           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |      |
| B           | 2021-01-02T00:00:00.000Z | curry        | 15    | N      |      |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 10    | N      |      |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 10    | Y      | 1    |
| B           | 2021-01-16T00:00:00.000Z | ramen        | 12    | Y      | 2    |
| B           | 2021-02-01T00:00:00.000Z | ramen        | 12    | Y      | 3    |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |      |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |      |
| C           | 2021-01-07T00:00:00.000Z | ramen        | 12    | N      |      |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/5995)
