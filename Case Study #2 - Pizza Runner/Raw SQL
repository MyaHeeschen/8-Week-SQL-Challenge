**Schema (MySQL v8.0)**

    CREATE SCHEMA pizza_runner; # create schema to store the data
    USE pizza_runner; # use pizza_runner as we want to create tables on it
    
    # create runners table that consists runner_id and registration_date
    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
    runner_id integer,
    registration_date date);
    
    # inserting data into the runners table
    INSERT INTO runners VALUES 
    (1, "2021-01-01"), (2, "2021-01-03"), (3, "2021-01-08"), (4, "2021-01-15");
    
    # create customer_orders that consists the order_id, customer_id, pizza_id, exclusions, extras, and order_time
    CREATE TABLE customer_orders (
    order_id integer,
    customer_id integer,
    pizza_id integer,
    exclusions VARCHAR(4),
    extras VARCHAR(4),
    order_time TIMESTAMP);
    
    
    # insert data to customer_orders table
    INSERT INTO customer_orders VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
      
    # use drop table statement in case we accidentaly create existing table
    DROP TABLE IF EXISTS runner_orders;
    
    #create runner_orders table
    CREATE TABLE runner_orders (
    order_id integer,
    runner_id integer,
    pickup_time VARCHAR(19),
    distance VARCHAR(7),
    duration VARCHAR(10),
    cancellation VARCHAR(23));
    
    # insert data into runner_orders table
    INSERT INTO runner_orders VALUES
    ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
    ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
    ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
    ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
    ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
    ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
    ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
    ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
    ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
    ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    # use drop table statement in case we accidentaly create existing table
    DROP TABLE IF EXISTS pizza_names;
    
    #create pizza_names table
    CREATE TABLE pizza_names (
    pizza_id integer,
    pizza_name text);
    
    # insert data into pizza_names table
    INSERT INTO pizza_names VALUES
    ("1", "Meat Lovers"), ("2", "Vegetarian");
    
    # use drop table statement in case we accidentaly create existing table
    DROP TABLE IF EXISTS pizza_recipes;
    
    # create pizza_recipes table
    CREATE TABLE pizza_recipes (
    pizza_id integer,
    toppings text);
    
    #insert data into pizza_recipes table
    INSERT INTO pizza_recipes VALUES
    ("1","1, 2, 3, 4, 5, 6, 8, 10"), ("2", "4, 6, 7, 9, 11, 12");
    
    # use drop table statement in case we accidentaly create existing table
    DROP TABLE IF EXISTS pizza_toppings;
    
    #create pizza_toppings table
    CREATE TABLE pizza_toppings (
    topping_id integer,
    topping_name text);
    
    # insert data into pizza_toppings table
    INSERT INTO pizza_toppings VALUES
    (1, 'Bacon'), (2, 'BBQ Sauce'), (3, 'Beef'), (4, 'Cheese'), (5, 'Chicken'), (6, 'Mushrooms'),
    (7, 'Onions'), (8, 'Pepperoni'), (9, 'Peppers'), (10, 'Salami'), (11, 'Tomatoes'),
    (12, 'Tomato Sauce');

---

**Query #1**

    drop temporary table if exists temp_cust_orders;

There are no results to be displayed.

---
**Query #2**

    create temporary table temp_cust_orders as (
    select 
    	order_id,
        customer_id,
        pizza_id,
        case
        	when exclusions like 'null' then ''
            else exclusions
            end exclusions,
        case
        	when extras like 'null' or extras is null then ''
            else extras
            end extras,
        order_time
    from pizza_runner.customer_orders);

There are no results to be displayed.

---
**Query #3**

    select * from temp_cust_orders;

| order_id | customer_id | pizza_id | exclusions | extras | order_time          |
| -------- | ----------- | -------- | ---------- | ------ | ------------------- |
| 1        | 101         | 1        |            |        | 2020-01-01 18:05:02 |
| 2        | 101         | 1        |            |        | 2020-01-01 19:00:52 |
| 3        | 102         | 1        |            |        | 2020-01-02 23:51:23 |
| 3        | 102         | 2        |            |        | 2020-01-02 23:51:23 |
| 4        | 103         | 1        | 4          |        | 2020-01-04 13:23:46 |
| 4        | 103         | 1        | 4          |        | 2020-01-04 13:23:46 |
| 4        | 103         | 2        | 4          |        | 2020-01-04 13:23:46 |
| 5        | 104         | 1        |            | 1      | 2020-01-08 21:00:29 |
| 6        | 101         | 2        |            |        | 2020-01-08 21:03:13 |
| 7        | 105         | 2        |            | 1      | 2020-01-08 21:20:29 |
| 8        | 102         | 1        |            |        | 2020-01-09 23:54:33 |
| 9        | 103         | 1        | 4          | 1, 5   | 2020-01-10 11:22:59 |
| 10       | 104         | 1        |            |        | 2020-01-11 18:34:49 |
| 10       | 104         | 1        | 2, 6       | 1, 4   | 2020-01-11 18:34:49 |

---
**Query #4**

    drop temporary table if exists clean_run_orders;

There are no results to be displayed.

---
**Query #5**

    create temporary table clean_run_orders as (
    select
    	order_id,
        runner_id,
        case
        	when pickup_time like 'null' then ''
            else pickup_time
            end pickup_time,
        case
        	when distance like '%km' then trim('km' from distance)
        	when distance like 'null' then ''
            else distance
            end distance,
        case
        	when duration like '%mins' then trim('mins' from duration)
        	when duration like '%minutes' then trim('minutes' from duration)
        	when duration like '%minute' then trim('minute' from duration)
        	when duration like 'null' then ''
    		else duration
            end duration,
        case
        	when cancellation like 'null' or cancellation is null then ''
            else cancellation
            end cancellation
    from pizza_runner.runner_orders);

There are no results to be displayed.

---
**Query #6**

    select * from clean_run_orders;

| order_id | runner_id | pickup_time         | distance | duration | cancellation            |
| -------- | --------- | ------------------- | -------- | -------- | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20       | 32       |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20       | 27       |                         |
| 3        | 1         | 2020-01-03 00:12:37 | 13.4     | 20       |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4     | 40       |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10       | 15       |                         |
| 6        | 3         |                     |          |          | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25       | 25       |                         |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4     | 15       |                         |
| 9        | 2         |                     |          |          | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10       | 10       |                         |

---
**Query #7**

    drop temporary table if exists temp_run_orders;

There are no results to be displayed.

---
**Query #8**

    create temporary table temp_run_orders as (
    select 
    	order_id,
        runner_id,
        case
        	when pickup_time like '' then ''
            else cast(pickup_time as datetime)
            end pickup_time,
        case
        	when distance like '' then ''
            else cast(distance as float)
            end distance_km,
        case
        	when duration like '' then ''
            else cast(duration as unsigned)
            end duration_min,
        cancellation
    from clean_run_orders);

There are no results to be displayed.

---
**Query #9**

    select * from temp_run_orders;

| order_id | runner_id | pickup_time         | distance_km | duration_min | cancellation            |
| -------- | --------- | ------------------- | ----------- | ------------ | ----------------------- |
| 1        | 1         | 2020-01-01 18:15:34 | 20          | 32           |                         |
| 2        | 1         | 2020-01-01 19:10:54 | 20          | 27           |                         |
| 3        | 1         | 2020-01-03 00:12:37 | 13.4        | 20           |                         |
| 4        | 2         | 2020-01-04 13:53:03 | 23.4        | 40           |                         |
| 5        | 3         | 2020-01-08 21:10:57 | 10          | 15           |                         |
| 6        | 3         |                     |             |              | Restaurant Cancellation |
| 7        | 2         | 2020-01-08 21:30:45 | 25          | 25           |                         |
| 8        | 2         | 2020-01-10 00:15:02 | 23.4        | 15           |                         |
| 9        | 2         |                     |             |              | Customer Cancellation   |
| 10       | 1         | 2020-01-11 18:50:20 | 10          | 10           |                         |

---
**Query #10**

    select 
    	count(order_id) pizzas
    from temp_cust_orders;

| pizzas |
| ------ |
| 14     |

---
**Query #11**

    select 
    	count(distinct order_id) orders
    from temp_cust_orders;

| orders |
| ------ |
| 10     |

---
**Query #12**

    select
    	runner_id,
        count(order_id)
    from temp_run_orders
    	where cancellation like ''
    	group by runner_id;

| runner_id | count(order_id) |
| --------- | --------------- |
| 1         | 4               |
| 2         | 3               |
| 3         | 1               |

---
**Query #13**

    select
    	pizza.pizza_name,
        count(run.order_id) deliveries
    from temp_cust_orders cust
    	join pizza_runner.pizza_names pizza
        	on cust.pizza_id = pizza.pizza_id
    	join temp_run_orders run
        	on cust.order_id = run.order_id
    where cancellation like ''
    group by pizza.pizza_name;

| pizza_name  | deliveries |
| ----------- | ---------- |
| Meat Lovers | 9          |
| Vegetarian  | 3          |

---
**Query #14**

    select
    	customer_id,
        sum(if(pizza_id = 1,1,0)) meatlovers,
        sum(if(pizza_id = 2,1,0)) vegetarian
    from temp_cust_orders
    group by customer_id;

| customer_id | meatlovers | vegetarian |
| ----------- | ---------- | ---------- |
| 101         | 2          | 1          |
| 102         | 2          | 1          |
| 103         | 3          | 1          |
| 104         | 3          | 0          |
| 105         | 0          | 1          |

---
**Query #15**

    with pizza_order_count as(
    select
    	cust.order_id order_id,
        count(cust.order_time) pizza_count
    from temp_cust_orders cust
    	join temp_run_orders run
        	on cust.order_id = run.order_id
    where cancellation = ''
    group by cust.order_id
    )
    
    select
    	max(pizza_count) max_pizzas
    from pizza_order_count;

| max_pizzas |
| ---------- |
| 3          |

---
**Query #16**

    select
    	cust.customer_id,
        sum(case
        	when exclusions <> 0 or extras <> 0 then 1
            else 0
            end) min_1_change,
        sum(case
            when exclusions = 0 and extras = 0 then 1
            else 0
            end) no_changes
    from temp_cust_orders cust
    	join temp_run_orders run
        	on cust.order_id = run.order_id
    where cancellation = ''
    group by customer_id;

| customer_id | min_1_change | no_changes |
| ----------- | ------------ | ---------- |
| 101         | 0            | 2          |
| 102         | 0            | 3          |
| 103         | 3            | 0          |
| 104         | 2            | 1          |
| 105         | 1            | 0          |

---
**Query #17**

    select
        sum(case
        	when exclusions <> 0 and extras <> 0 then 1
            else 0
            end) excl_and_extras
    from temp_cust_orders cust
    	join temp_run_orders run
        	on cust.order_id = run.order_id
    where cancellation = '';

| excl_and_extras |
| --------------- |
| 1               |

---
**Query #18**

    select
    	hour(order_time) hour_of_day,
        count(order_id) pizzas
    from temp_cust_orders
    group by hour(order_time)
    order by pizzas desc;

| hour_of_day | pizzas |
| ----------- | ------ |
| 18          | 3      |
| 23          | 3      |
| 13          | 3      |
| 21          | 3      |
| 19          | 1      |
| 11          | 1      |

---
**Query #19**

    select
    	dayname(order_time) hour_of_day,
        count(order_id) pizzas
    from temp_cust_orders
    group by dayname(order_time)
    order by pizzas desc;

| hour_of_day | pizzas |
| ----------- | ------ |
| Wednesday   | 5      |
| Saturday    | 5      |
| Thursday    | 3      |
| Friday      | 1      |

---
## Runner and Customer Experience

**Query #1**

    select 
    	week(registration_date, 1) week,
        count(runner_id) new_runners
    from pizza_runner.runners
    group by week;

| week | new_runners |
| ---- | ----------- |
| 0    | 2           |
| 1    | 1           |
| 2    | 1           |

---
**Query #2**

    with run_arrival as(
    select 
    	r.runner_id runner,
        (timediff(r.pickup_time, c.order_time))  time_diff
    from pizza_runner.runner_orders r
    	join pizza_runner.customer_orders c
        	on r.order_id = c.order_id
    where cancellation = '' 
    )
    
    select
    	runner, 
        time(round(avg(time_diff))) avg_HQ_pickup
    from run_arrival
    group by runner
    order by runner;

| runner | avg_HQ_pickup |
| ------ | ------------- |
| 1      | 00:15:54      |
| 2      | 00:23:59      |
| 3      | 00:10:28      |

---
**Query #3**

    with pizza_prep as(
    select 
    	order_id,
        count(order_id) num_pizza,
        (timediff(r.pickup_time, c.order_time)) prep_time
    from pizza_runner.runner_orders r
    	join pizza_runner.customer_orders c
        	using (order_id)
    where cancellation = ''
    group by order_id, prep_time
    )
    
    select 
    	num_pizza,
        time(round(avg(prep_time))) avg_prep_time
    from pizza_prep
    group by num_pizza;

| num_pizza | avg_prep_time |
| --------- | ------------- |
| 1         | 00:12:21      |
| 2         | 00:18:23      |
| 3         | 00:29:17      |

---
**Query #4**

    select 
    	customer_id,
        concat(round(avg(distance)), " km") avg_distance
    from pizza_runner.customer_orders c
    	join pizza_runner.runner_orders r
        	on c.order_id = r.order_id
    where cancellation = ''
    group by customer_id;

| customer_id | avg_distance |
| ----------- | ------------ |
| 101         | 20 km        |
| 102         | 17 km        |
| 103         | 23 km        |
| 104         | 10 km        |
| 105         | 25 km        |

---
**Query #5**

    select
    	concat((max(duration) - min(duration)), " minutes") delivery_time_range
    from pizza_runner.runner_orders
    where cancellation = '';

| delivery_time_range |
| ------------------- |
| 30 minutes          |

---
**Query #6**

    select
    	runner_id,
        order_id,
        distance distance_km,
        duration duration_min,
        round((distance / duration * 60), 2) as speed_km_per_hr
    from pizza_runner.runner_orders
    where cancellation = ''
    order by runner_id, speed_km_per_hr desc;

| runner_id | order_id | distance_km | duration_min | speed_km_per_hr |
| --------- | -------- | ----------- | ------------ | --------------- |
| 1         | 10       | 10          | 10           | 60              |
| 1         | 2        | 20          | 27           | 44.44           |
| 1         | 3        | 13.4        | 20           | 40.2            |
| 1         | 1        | 20          | 32           | 37.5            |
| 2         | 8        | 23.4        | 15           | 93.6            |
| 2         | 7        | 25          | 25           | 60              |
| 2         | 4        | 23.4        | 40           | 35.1            |
| 3         | 5        | 10          | 15           | 40              |

---
**Query #7**

    select 
      runner_id, 
      concat(ROUND(100 * SUM(
        CASE WHEN cancellation = '' THEN 1
        ELSE 0 END) / COUNT(*), 0), "%") AS success_rate
    from pizza_runner.runner_orders
    group by runner_id;

| runner_id | success_rate |
| --------- | ------------ |
| 1         | 100%         |
| 2         | 75%          |
| 3         | 50%          |

---

